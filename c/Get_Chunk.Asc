' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
' GET CHUNK by Bruce Uncle, Implemented by Marc Williams 
' with code from Françios Lionet and Michael D. Cox    
'
' This program extracts the chunk needed for the .config file  
' from the assembled object .o file. 
'
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
'
_MAXARGC=6
Dim ARGV$(_MAXARGC)

COM$=Command Line$

_CLIHANDLE=Doscall(-60) : _CLIINPUT=Doscall(-54)
If _CLIHANDLE=0
   A$="CON:0/16/640/96/CLOSE/Get Chunk by the Amos Factory Team"+Chr$(0)
   Dreg(1)=Varptr(A$) : Dreg(2)=1004 : _CLIHANDLE=Doscall(-30)
   If _CLIHANDLE : _CLICLOSE=_CLIHANDLE : _CLIINPUT=_CLIHANDLE : End If 
End If 

_OUT["AMOSPro II Get Chunk by the Amos Factory Team",2,0]
_OUT["~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",2,0]
_OUT["Public domain, written using AMOS Professional",2,0]
_OUT["",2,0]


' Check command line arguments 
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
_GET_ARGS[COM$,_MAXARGC]
_TOTAL_ARGS=Param
If _TOTAL_ARGS<1 or _TOTAL_ARGS>2 Then _ABORT


' Load the file  
' ~~~~~~~~~~~~~  
COM$=ARGV$(0)
If Not Exist(COM$) Then _ABORT
_OUT["Loading "+COM$+"...",2,0]
Open In 5,COM$
L=Lof(5)
Reserve As Work 10,L
Sload 5 To Start(10),L
Close 5

' Save the file  
' ~~~~~~~~~~~~~  
COM$=ARGV$(1)
_OUT["Saving "+COM$+"...",2,0]

Open Out 3,COM$
Ssave 3,Start(10)+32 To Start(10)+32+Leek(Start(10)+28)*4
Close 3

Erase 10

_QUIT

Procedure _QUIT
   
   Shared _CLICLOSE
   
   _OUT["",2,0]
   
   If _CLIHANDLE
      If _CLICLOSE
         Dreg(1)=_CLICLOSE
         R=Doscall(-36)
      End If 
   End If 
   End 
End Proc
Procedure _OUT[A$,R,D]
   
   Shared _CLIHANDLE,_CLICLOSE
   
      If R=1 : A$=A$+Chr$($D) : End If 
      If R=2 : A$=A$+Chr$($A) : End If 
      Dreg(1)=_CLIHANDLE : Dreg(2)=Varptr(A$) : Dreg(3)=Len(A$)
      R=Doscall(-48)

End Proc Procedure _IN
Procedure _ABORT

   Shared COM$

   _OUT["",2,0]
   _OUT["Program aborted!",2,0]
   _OUT[COM$,2,0]
   _QUIT
   
End Proc

' This is a routine by Michael D. Cox (aj639@Cleveland.freenet.edu)  

Procedure _GET_ARGS[CMDLN$,ARGC]

   Shared ARGV$()
   
   ' Here we just set the array to empty strings
   For X=0 To ARGC-1
      ARGV$(X)=""
   Next X
   ' We now assign our needed variables 
   ' CMDLN_LEN = Length of the CMDLN$ so we know when we have reached the end 
   CMDLN_LEN=Len(CMDLN$)
   ' CURR_ARG = Current command line argument we are processing 
   CURR_ARG=0
   ' CURR_POS = Position within CMDLN$
   CURR_POS=1
   '
   ' We begin to find the first character in the argument 
   _START_ARG:
   If CURR_POS>CMDLN_LEN : Rem Make sure we have not gone past EOL
      Goto ARG_EXIT
   End If 
   ' Compare current chr to a space or a tab (chr$(9)) which seperate args  
   If(Mid$(CMDLN$,CURR_POS,1)=" ") or(Mid$(CMDLN$,CURR_POS,1)=Chr$(9))
      Inc CURR_POS
      Goto _START_ARG
   End If 
   ' Just a check to make sure we have not found an extra arg 
   If(CURR_ARG+1)>ARGC
      Goto ARG_EXIT
   End If 
   ' See if the chracter is a double quote (")
   If Mid$(CMDLN$,CURR_POS,1)=Chr$(34)
      Inc CURR_POS
      Goto _QUOTE
   End If 
   ' Well, if we get to here we have found the first character  
   ARGV$(CURR_ARG)=Mid$(CMDLN$,CURR_POS,1)
   Inc CURR_POS
   '
   ' Begin looking for the next character 
   _NEXT_CHR:
   If CURR_POS>CMDLN_LEN
      Goto ARG_EXIT
   End If 
   If(Mid$(CMDLN$,CURR_POS,1)=" ") or(Mid$(CMDLN$,CURR_POS,1)=Chr$(9))
      Goto _END_ARG
   End If 
   ' If it is not a space or tab or end of the line, must be the next character 
   ARGV$(CURR_ARG)=ARGV$(CURR_ARG)+Mid$(CMDLN$,CURR_POS,1)
   Inc CURR_POS
   ' So, find the next one and keep going . . . 
   Goto _NEXT_CHR
   '
   ' We found all the characters in an argument 
   _END_ARG:
   Inc CURR_ARG
   Inc CURR_POS
   Goto _START_ARG
   '
   ' Our routine to handle quotes which are used to put around arguments that 
   ' may have spaces or other special characters in them. 
   _QUOTE:
   If CURR_POS>CMDLN_LEN
      Goto ARG_EXIT
   End If 
   If Mid$(CMDLN$,CURR_POS,1)=Chr$(34)
      Goto _END_ARG
   End If 
   ' A splat (*) is the BCPL equivalent to the ESC command for doing ANSI codes 
   If Mid$(CMDLN$,CURR_POS,1)<>"*"
      Goto _ADD_QUOTE_CHR
   End If 
   Inc CURR_POS
   ' A *N is a newline or chr$(10)
   If Upper$(Mid$(CMDLN$,CURR_POS,1))<>"N"
      Goto _CHECK_ESC
   End If 
   ARGV$(CURR_ARG)=ARGV$(CURR_ARG)+Chr$(10)
   Inc CURR_POS
   Goto _QUOTE
   '
   ' A *E is an actual ESC or chr$(27)
   _CHECK_ESC:
   If Upper$(Mid$(CMDLN$,CURR_POS,1))<>"E"
      Goto _ADD_QUOTE_CHR
   End If 
   ARGV$(CURR_ARG)=ARGV$(CURR_ARG)+Chr$(27)
   Inc CURR_POS
   Goto _QUOTE
   '
   ' We made it to here, meaning there were no special escape codes found 
   ' so add it to the current argument string 
   _ADD_QUOTE_CHR:
   ARGV$(CURR_ARG)=ARGV$(CURR_ARG)+Mid$(CMDLN$,CURR_POS,1)
   Inc CURR_POS
   Goto _QUOTE
   '
   ' Goto here when we have found all arguments 
   ARG_EXIT:
   CMDLN$=""
   CMDLN_LEN=0
   CURR_POS=0
End Proc[CURR_ARG+1]
