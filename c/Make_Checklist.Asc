' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
' MAKE CHECKLIST by Francios Lionet  
'
' Cree la liste des instructions à tester
'
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Set Buffer 80
Global LEVEL

Dim INST$(2000)
Global INST$(),NINST,NFAIT
For N=0 To 2000 : INST$(N)="|" : Next 

LEVEL=1
_CLIHANDLE=Doscall(-60) : _CLIINPUT=Doscall(-54)
'
If _CLIHANDLE=0
   A$="CON:0/16/640/96/Check CLib by F.Lionet"+Chr$(0)
   Dreg(1)=Varptr(A$) : Dreg(2)=1004 : _CLIHANDLE=Doscall(-30)
   If _CLIHANDLE : _CLICLOSE=_CLIHANDLE : _CLIINPUT=_CLIHANDLE : End If 
End If 
'
TEMP$="Instruction_List.Asc"
OLD$="Instructions_Testees.Asc"
TEST$="Instructions_ATester.Asc"

' Recupere les instructions
' ~~~~~~~~~~~~~~~~~~~~~~~~~  
_LISTIT["+Lib.s","Main AMOS Instruction Set"] : If Param : _ABORT : End If 
_LISTIT["+Music.s","Music Instruction Set"] : If Param : _ABORT : End If 
_LISTIT["+Compact.s","Packer Instruction Set"] : If Param : _ABORT : End If 
_LISTIT["+Request.s","Requester Instruction Set"] : If Param : _ABORT : End If 
_LISTIT["+IO_Ports.s","IO Instruction Set"] : If Param : _ABORT : End If 

Open Out 2,TEMP$
_OUT["Nombre total d'instructions:"+Str$(NINST),2,1]
_OUT["Instructions deja faites:"+Str$(NFAIT),2,1]
_DATE$ : D$=Param$ : _TIME$ : TM$=Param$
Print #2,"' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";Chr$(10);
Print #2,"' AMOSPro II";NINST;" instructions le "+D$+" "+TM$;Chr$(10);
Print #2,"'"+Str$((NFAIT*100)/NINST)+" % Termine...";Chr$(10);
Print #2,"'";Chr$(10);
Print #2,"' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";Chr$(10);
Sort INST$(0)
For N=0 To NINST-1 : Print #2,INST$(N);Chr$(10); : Next 
Print #2,"'";Chr$(10);
Close 2

End 

' Sort les instructions à tester 
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
_BLOAD[OLD$,10]
_BLOAD[TEST$,11]
Append 2,TEST$
Open Out 3,OLD$
_DATE$ : D$=Param$ : _TIME$ : TM$=Param$
Print #2,"' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";Chr$(10);
Print #2,"' ";T$;"Liste des instructions a tester le "+D$+" "+TM$;Chr$(10);
Print #2,"'";Chr$(10);
Print #2,"' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";Chr$(10);
Print #3,"' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";Chr$(10);
Print #3,"' ";T$;"Liste des instructions deja testees le "+D$+" "+TM$;Chr$(10);
Print #3,"'";Chr$(10);
Print #3,"' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";Chr$(10);

For N=0 To NINST
   
   If Left$(INST$(N),2)="OK"
      A$=Mid$(INST$(N),3)+":"
      P=Hunt(Start(11) To Start(11)+Length(11),A$)
      If P
         ' A$=Peek$(P,100,Chr$(10)) : Print #2,A$;Chr$(10); 
      Else 
         P=Hunt(Start(10) To Start(10)+Length(10),A$)
         If P
            A$=Peek$(P,100,Chr$(10)) : Print #3,A$;Chr$(10);
         Else 
            Print #2,A$;Chr$(10);
         End If 
      End If 
   End If 
   
Next 

Close 


Procedure _BLOAD[F$,B]
   Open In 1,F$ : L=Lof(1) : Close 1
   Reserve As Work B,L
   Bload F$,Start(B)
End Proc[0]
Procedure _LISTIT[F$,T$]

   X=Free

   Trap Open In 1,F$
   If Errtrap : Bell : Stop : End If 
   'Print T$
   Set Input 10,-1
   
   _OUT["Fichier "+F$,2,1]
   
   Do 
      Trap Line Input #1,I$
      If Errtrap : Pop Proc[-1] : End If 
      Exit If Instr(I$,"TOKEN_START")
   Loop 

   Do 
      
      Trap Line Input #1,T1$
      If Errtrap : Pop Proc[-1] : End If 
      Exit If Instr(T1$,"TOKEN_END")
      
      If Instr(T1$,"dc.w")
         
         Trap Line Input #1,T2$
         Exit If Errtrap
         
         P=Instr(T2$,"dc.b")
         
         If Mid$(T2$,P+5,1)<>"$"
            
            P=Instr(T2$,'"')
            If P
               
               TK$=""
               Do 
                  Inc P
                  C$=Mid$(T2$,P,1)
                  Exit If C$='"'
                  TK$=TK$+C$
               Loop 
               Inc P
               C$=Mid$(T2$,P,1)
               If C$<>"+"
                  TK$=TK$+Mid$(T2$,P+2,1)
               End If 
               
               O=0 : F=0 : I=0 : V=0
               If Instr(T2$,'"I') : Inc I : End If 
               If Instr(T2$,'"0') : Inc F : End If 
               If Instr(T2$,'"1') : Inc F : End If 
               If Instr(T2$,'"2') : Inc F : End If 
               If Instr(T2$,'"V') : Inc V : End If 
               If Instr(T2$,'"O') : Inc O : End If 
               
               If O=0
                  
                  If Left$(TK$,1)="!"
                     TK$=Mid$(TK$,2)
                  End If 
                  
                  If F : TK$="= "+TK$ : End If 
                  If I : TK$="i "+TK$ : End If 
                  If V : TK$="v "+TK$ : End If 
                  If F+V+I=0 : TK$="s "+TK$ : End If 
                  
                  If Instr(Upper$(T1$),"L_NUL,L_NUL")
                     TK$="AF "+TK$
                  Else 
                     TK$="OK "+TK$ : Inc NFAIT
                  End If 

                  If Right$(TK$,1)=" " : TK$=Left$(TK$,Len(TK$)-1) : End If 

                  Inc NINST
                  
                  INST$(NINST)=TK$
                  
                  _OUT["Nombre d'instructions:"+Str$(NINST),1,1]
                  
               End If 
            End If 
         End If 
      End If 
      
   Loop 
   
   Close 1
   _OUT["",2,1]

End Proc[0]

Procedure _ABORT
   
   _OUT["",2,0]
   _OUT["String hunt aborted!",2,0]
   _QUIT
   
End Proc
Procedure _QUIT
   
   Shared _CLICLOSE

   _OUT["",2,0]
   If _CLICLOSE : _OUT["Press <RETURN> to end...",2,0] : _IN : End If 
   
   _CLOSE_OUT
   
   If Prg State<=0 : System : End If 
   Edit 
   
End Proc

Procedure _CLOSE_OUT
   
   Shared _CLIHANDLE,_CLICLOSE
   
   If _CLIHANDLE
      If _CLICLOSE : Dreg(1)=_CLICLOSE : R=Doscall(Lvo("Close")) : Amos To Front : End If 
   Else 
      Wait 50 : Screen Close 0
   End If 
   
End Proc
Procedure _OUT[A$,R,D]
   
   Shared _CLIHANDLE,_CLICLOSE

   If R=1 : A$=A$+Chr$($D) : End If 
   If R=2 : A$=A$+Chr$($A) : End If 
   Dreg(1)=_CLIHANDLE : Dreg(2)=Varptr(A$) : Dreg(3)=Len(A$)
   R=Doscall(-48)
   
End Proc
Procedure _IN
   
   Shared _CLIHANDLE,_CLIINPUT
   
   If _CLIINPUT
      Do 
         Multi Wait 
         Dreg(1)=_CLIINPUT : Dreg(2)=10 : R=Doscall(Lvo("WaitForChar"))
         If R
            While R
               A$=Space$(1)
               Dreg(1)=_CLIINPUT : Dreg(2)=Varptr(A$) : Dreg(3)=Len(A$) : R=Doscall(Lvo("Read"))
               If A$>=" " : IN$=IN$+A$ : End If 
               Dreg(1)=_CLIINPUT : Dreg(2)=10 : R=Doscall(Lvo("WaitForChar"))
            Wend 
            Pop Proc[IN$]
         End If 
      Loop 
   End If 
   If _CLIHANDLE=0
      Curs On 
      Line Input " ";IN$
      Curs Off : Cup 
      Pop Proc[IN$]
   End If 
   
End Proc[""]
Procedure _EXTRACT[COM$,POS]
   '
   ' Analyse d'une ligne de commande
   ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   A$=""
   '
   P=1 : While Mid$(COM$,P,1)=" " : Inc P : Wend 
   If POS>1
      For C=2 To POS
         OP=P
         P=Instr(COM$," ",OP) : Exit If P=0
         While Mid$(COM$,P,1)=" " : Inc P : Wend 
      Next 
   End If 
   If P
      PP=Instr(COM$," ",P)
      If PP=0 : PP=Len(COM$)+1 : End If 
      A$=Mid$(COM$,P,PP-P)
   End If 
   '
End Proc[A$]
Procedure _BREAK
   
   Shared _CLIHANDLE,_CLIINPUT
   
   If _CLIINPUT
      Dreg(1)=_CLIINPUT : Dreg(2)=10 : R=Doscall(Lvo("WaitForChar"))
      If R
         While R
            A$=Space$(1)
            Dreg(1)=_CLIINPUT : Dreg(2)=Varptr(A$) : Dreg(3)=Len(A$) : R=Doscall(Lvo("Read"))
            Dreg(1)=_CLIINPUT : Dreg(2)=10 : R=Doscall(Lvo("WaitForChar"))
         Wend 
         Pop Proc[True]
      End If 
   End If 
   If _CLIHANDLE=0
      A$=Inkey$
      If A$<>""
         Repeat : Until Inkey$=""
         Pop Proc[True]
      End If 
   End If 
   
End Proc[0]
Procedure _DATE$
   '
   ' Call DOS DateStamp function
   T$=Space$(12)
   Dreg(1)=Varptr(T$)
   RIEN=Doscall(-192)
   NJ=Leek(Varptr(T$))
   '
   ' Find this year's first day 
   A=1978 : JOUR=7
   Do 
      BIS=0 : If(A and 3)=0 : BIS=1 : End If 
      Exit If NJ-365-BIS<0
      Add JOUR,1+BIS : If JOUR>7 : Add JOUR,-7 : End If 
      Add NJ,-365-BIS
      Inc A
   Loop 
   '
   ' Find month 
   M=1
   Do 
      Read N
      Exit If NJ-N<0
      Add NJ,-N : Inc M
   Loop 
   Inc NJ
   '
   ' Fabrique la chaine 
      J$=Mid$(Str$(NJ),2) : If Len(J$)<2 : J$="0"+J$ : End If 
      M$=Mid$(Str$(M),2) : If Len(M$)<2 : M$="0"+M$ : End If 
      A$=Mid$(Str$(A),2)
      DATE$=J$+"-"+M$+"-"+A$
   '
   ' Length of each month 
   Data 31,28+BIS,31,30,31,30,31,31,30,31,30,31
   '
End Proc[DATE$]
Procedure _TIME$
   '
   ' Call DOS function
   T$=Space$(12)
   Dreg(1)=Varptr(T$)
   RIEN=Doscall(-192)
   MN=Leek(Varptr(T$)+4)
   SEC=Leek(Varptr(T$)+8)
   '
   ' Minutes calculation
   H=MN/60 : H$=Mid$(Str$(H),2) : If Len(H$)<2 : H$="0"+H$ : End If 
   M=MN mod 60 : M$=Mid$(Str$(M),2) : If Len(M$)<2 : M$="0"+M$ : End If 
   '
   ' Seconds calculation  
   S=SEC/50 : S$=Mid$(Str$(S),2) : If Len(S$)<2 : S$="0"+S$ : End If 
   '
   ' Final string 
   TIME$=H$+":"+M$+":"+S$
   '
End Proc[TIME$]
